image:
  file: .gitpod.Dockerfile

tasks:
  - name: Setup For BwoB Intro To Bioinformatics (Mamba, QIIME 2, q2-krona, and Krona)
    init: |
      # Set non-interactive mode for all installations
      export DEBIAN_FRONTEND=noninteractive
      export CONDA_ALWAYS_YES=true
      export MAMBA_NO_BANNER=1
      
      CONDA_DIR="/workspace/mambaforge"
      if [ ! -d "$CONDA_DIR" ]; then
        echo "Installing Mambaforge..."
        wget -q https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh
        bash Mambaforge-Linux-x86_64.sh -b -p $CONDA_DIR
        rm Mambaforge-Linux-x86_64.sh
      fi
      
      # Set up environment variables
      echo 'export PATH="$CONDA_DIR/bin:$PATH"' >> $HOME/.bashrc
      echo 'export CONDA_DIR="/workspace/mambaforge"' >> $HOME/.bashrc
      echo 'export CONDA_ALWAYS_YES=true' >> $HOME/.bashrc
      echo 'export MAMBA_NO_BANNER=1' >> $HOME/.bashrc
      echo '. $CONDA_DIR/etc/profile.d/conda.sh' >> $HOME/.bashrc
      echo '. $CONDA_DIR/etc/profile.d/mamba.sh' >> $HOME/.bashrc
      source $HOME/.bashrc
      
      # Initialize conda and mamba
      conda init bash --no-user
      mamba init bash --no-user
      
      # Create QIIME2 environment if it doesn't exist
      if [ ! -d "$CONDA_DIR/envs/qiime2-amplicon-2025.4" ]; then
        echo "Updating base environment..."
        mamba update -n base mamba conda --yes
        
        echo "Creating QIIME2 environment (this will be much faster with Mamba)..."
        max_retries=3
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          if mamba env create -n qiime2-amplicon-2025.4 --file https://raw.githubusercontent.com/qiime2/distributions/refs/heads/dev/2025.4/amplicon/released/qiime2-amplicon-ubuntu-latest-conda.yml --yes; then
            echo "QIIME 2 environment created successfully with Mamba"
            break
          else
            echo "Failed to create QIIME 2 environment. Retrying in 10 seconds..."
            sleep 10
            ((retry_count++))
          fi
        done
        if [ $retry_count -eq $max_retries ]; then
          echo "Failed to create QIIME 2 environment after $max_retries attempts"
          exit 1
        fi
      fi
      
      source $HOME/.bashrc
      conda activate qiime2-amplicon-2025.4
      
      # Install bash-completion if not already installed (non-interactive)
      if ! dpkg -l | grep -q bash-completion; then
        sudo DEBIAN_FRONTEND=noninteractive apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y bash-completion
      fi
      
      # Install Krona with error handling (using mamba for speed)
      echo "Installing Krona with Mamba..."
      max_retries=2
      retry_count=0
      while [ $retry_count -lt $max_retries ]; do
        if mamba install -c bioconda krona --yes; then
          echo "Krona installed successfully"
          break
        else
          echo "Failed to install Krona. Retrying..."
          sleep 5
          ((retry_count++))
        fi
      done
      
      # Update Krona taxonomy (auto-accept any prompts)
      echo "Updating Krona taxonomy database..."
      yes | ktUpdateTaxonomy.sh || echo "Warning: Krona taxonomy update completed with warnings"
      
      # Install q2-krona plugin
      echo "Installing q2-krona plugin..."
      pip install git+https://github.com/kaanb93/q2-krona.git --quiet
      
      # Refresh QIIME 2 cache and enable tab completion
      echo "Setting up QIIME 2 tab completion..."
      qiime dev refresh-cache
      
      # Set up QIIME 2 tab completion in bashrc
      echo "" >> $HOME/.bashrc
      echo "# Enable bash completion" >> $HOME/.bashrc
      echo "if [ -f /etc/bash_completion ]; then" >> $HOME/.bashrc
      echo "    . /etc/bash_completion" >> $HOME/.bashrc
      echo "fi" >> $HOME/.bashrc
      echo "" >> $HOME/.bashrc
      echo "# QIIME 2 tab completion" >> $HOME/.bashrc
      echo "if [ -f $CONDA_DIR/envs/qiime2-amplicon-2025.4/bin/tab-qiime ]; then" >> $HOME/.bashrc
      echo "    source $CONDA_DIR/envs/qiime2-amplicon-2025.4/bin/tab-qiime" >> $HOME/.bashrc
      echo "fi" >> $HOME/.bashrc
      # Auto-activate conda environment
      echo "" >> $HOME/.bashrc
      echo "# Auto-activate QIIME 2 environment" >> $HOME/.bashrc
      echo "conda activate qiime2-amplicon-2025.4" >> $HOME/.bashrc
      
    command: |
      # Set non-interactive environment
      export CONDA_DIR="/workspace/mambaforge"
      export CONDA_ALWAYS_YES=true
      export MAMBA_NO_BANNER=1
      
      # Source bashrc to get all configurations
      source $HOME/.bashrc
      
      # Explicitly activate the environment
      conda activate qiime2-amplicon-2025.4
      
      # Generate tab completion if it doesn't exist
      if [ ! -f "$CONDA_DIR/envs/qiime2-amplicon-2025.4/bin/tab-qiime" ]; then
        echo "Generating QIIME 2 tab completion..."
        qiime dev refresh-cache
      fi
      
      # Source tab completion for current session
      if [ -f "$CONDA_DIR/envs/qiime2-amplicon-2025.4/bin/tab-qiime" ]; then
        source "$CONDA_DIR/envs/qiime2-amplicon-2025.4/bin/tab-qiime"
      fi
      
      echo "=========================================="
      echo "Mamba + QIIME 2 Setup Complete!"
      echo "=========================================="
      echo ""
      
      echo "Verifying installation..."
      conda info
      mamba --version
      qiime --version
      
      echo ""
      echo "Verifying Krona installation:"
      which ktImportText
      
      echo ""
      echo "Verifying q2-krona plugin installation:"
      qiime krona --help
      
      echo ""
      echo "=========================================="
      echo "Setup complete! Key improvements:"
      echo "✅ Using Mamba for faster package management"
      echo "✅ All installations are fully automated"
      echo "✅ Tab completion is enabled"
      echo "✅ Environment auto-activates on new terminals"
      echo ""
      echo "Try typing 'qiime ' and pressing TAB!"
      echo "=========================================="

vscode:
  extensions:
    - ms-python.python
    - ms-python.debugpy
